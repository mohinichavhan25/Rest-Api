//1.Initially, we need to define the team entity. Therefore, the following team class is defined:

public class Team {
	public Team() {}
	  
    // Parameterized Constructor
    // to assign the values
    // to the properties of
    // the entity
     public Team(
        Integer id, String firstName,
        String lastName, String email,String location)
    {
  
        super();
  
        this.id = id;
  
        this.firstName = firstName;
  
        this.lastName = lastName;
  
        this.email = email;
        
        this.location=location;
  
           
    }
  
       private Integer id;
  
       private String firstName;
  
       private String lastName;
  
       private String email;
       
       private String location;
  
    // Overriding the toString method
    // to find all the values
    @Override
   public String toString()
    {
  
        return "Employee [id="
            + id + ", firstName="
            + firstName + ", lastName="
            + lastName + ", email="
            + email + ",location="
            + location + "]";
  
           
    }
  
    // Getters and setters of
    // the properties
    public Integer getId()
    {
  
         return id;
    }
  
    public void setId(Integer id)
    {
  
         this.id = id;
    }
  
    public String getFirstName()
    {
  
         return firstName;
    }
  
    public void setFirstName(
        String firstName)
    {
  
         this.firstName = firstName;
    }
  
    public String getLastName()
    {
  
         return lastName;
    }
  
    public void setLastName(
        String lastName)
    {
  
         this.lastName = lastName;
    }
  
    public String getEmail()
    {
  
         return email;
    }
  
    public void setEmail(String email)
    {
  
         this.email = email;
    }
    
    public String getLocation()
    {
  
         return location;
    }
  
    public void setLocation(String location)
    {
  
         this.location = location;
    }
}

//2.Now, we need to create a storage class which stores the list of all the teams:

import java.util.ArrayList;
import java.util.List;

public class Teams {
	private List<Team> teamList;
	  
    // Method to return the list
    // of teams
    public List<Team> getTeamList()
    {
  
        if (teamList == null) {
  
            teamList
                = new ArrayList<>();
  
                   
        }
  
        return teamList;
  
           
    }
  
    public void
    setTeamList(
        List<Team> teamList)
    {
        this.teamList
            = teamList;
    }
}


//3.Till now, we have defined the entity team and created a storage class. Now, we need to access the teams. So, we create a class from where we will create an object of the storage class to store the teams:

//import org.springframework
    //.stereotype
    //.Repository;
	// Class to create a list
	// of teams
	
public class TeamDao {
	

	
	

		private static Teams list
			= new Teams();

		// This static block is executed
		// before executing the main
		// block
		static
		{

			// Creating a few employees
			// and adding them to the list
			list.getTeamList().add(
				new Team(
					1,
					"Prem",
					"Tiwari",
					"chapradreams@gmail.com",
					"pune"));

			list.getTeamList().add(
				new Team(
					2, "Vikash",
					"Kumar",
					"abc@gmail.com",
					"mumbai"));

			list.getTeamList().add(
				new Team(
					3, "Ritesh",
					"Ojha",
					"asdjf@gmail.com",
					"noida"));

			 
		

		// Method to return the list
		public Teams getAllTeams()
		{

			return list;
		}

		 
			// Method to add an team
			// to the teams list
			public void
			
			addTeam(Team team)
		{
			list.getTeamList()
				.add(team);
			 
		}
	}
	}

4.Finally, we need to create a controller class which is the actual implementation of the REST API.
According to the REST rules, every new entry in the database has to be called by the POST method and all
the requests from the database must be called using the GET method. The same methods are implemented in the following code:

@RestController
@RequestMapping(path = "/team")



public class TeamController {
	
	@Autowired
	   private TeamDao teamDao;
	       
	        // Implementing a GET method
	        // to get the list of all
	        // the employees
	   @GetMapping(
	        path = "/",
	        produces = "application/json")
	  
	    public Teams getTeams()
	    {
	  
	        return teamDao
	            .getAllTeams();
	    }
	  
	       
	        // Create a POST method
	        // to add an employee
	        // to the list
	   @PostMapping(
	        path = "/",
	        consumes = "application/json",
	        produces = "application/json")
	  
	    public ResponseEntity<Object> addTeam(
	        @RequestBody Team team)
	    {
	  
	        // Creating an ID of an employee
	        // from the number of employees
	        Integer id
	            = teamDao
	                  .getAllTeams()
	                  .getTeamList()
	                  .size()
	              + 1;
	  
	        team.setId(id);
	  
	        teamDao
	            .addTeam(team);
	  
	        URI location
	            = ServletUriComponentsBuilder
	                  .fromCurrentRequest()
	                  .path("/{id}")
	                  .buildAndExpand(
	                      team.getId())
	                  .toUri();
	  
	               return ResponseEntity
	            .created(location)
	            .build();
	    }
	}
	
//	5.After implementing all the classes in the project, run the project as Spring Boot App. Once the server starts running, we can send the requests through the browser or postman. We can access the running app by going into the following URL:
http://localhost:8080/teams/



//2.1.Initially, we need to define the player entity. Therefore, the following player class is defined:
public class Player {
	public Player() {}
	  
    // Parameterized Constructor
    // to assign the values
    // to the properties of
    // the entity
     public Player(
        Integer id, String firstName,
        String lastName, String email,String location)
    {
  
        super();
  
        this.id = id;
  
        this.firstName = firstName;
  
        this.lastName = lastName;
  
        this.email = email;
        
        this.location=location;
  
           
    }
  
       private Integer id;
  
       private String firstName;
  
       private String lastName;
  
       private String email;
       
       private String location;
  
    // Overriding the toString method
    // to find all the values
    @Override
   public String toString()
    {
  
        return "Employee [id="
            + id + ", firstName="
            + firstName + ", lastName="
            + lastName + ", email="
            + email + ",location="
            + location + "]";
  
           
    }
  
    // Getters and setters of
    // the properties
    public Integer getId()
    {
  
         return id;
    }
  
    public void setId(Integer id)
    {
  
         this.id = id;
    }
  
    public String getFirstName()
    {
  
         return firstName;
    }
  
    public void setFirstName(
        String firstName)
    {
  
         this.firstName = firstName;
    }
  
    public String getLastName()
    {
  
         return lastName;
    }
  
    public void setLastName(
        String lastName)
    {
  
         this.lastName = lastName;
    }
  
    public String getEmail()
    {
  
         return email;
    }
  
    public void setEmail(String email)
    {
  
         this.email = email;
    }
    
    public String getLocation()
    {
  
         return location;
    }
  
    public void setLocation(String location)
    {
  
         this.location = location;
    }
}

//2.2 Now, we need to create a storage class which stores the list of all the players:

import java.util.ArrayList;
	import java.util.List;
	
public class Players {
	
	

	
		private List<Player> playerList;
		  
	    // Method to return the list
	    // of players
	    public List<Player> getPlayerList()
	    {
	  
	        if (playerList == null) {
	  
	            playerList
	                = new ArrayList<>();
	  
	                   
	        }
	  
	        return playerList;
	  
	           
	    }
	  
	    public void
	    setPlayerList(
	        List<Player> playerList)
	    {
	        this.playerList
	            = playerList;
	    }
	}

//2.3Till now, we have defined the entity player and created a storage class. Now, we need to access the players. So, we create a class from where we will create an object of the storage class to store the players:

public class PlayerDao {
	

	private static Players list
		= new Players();

	// This static block is executed
	// before executing the main
	// block
	static
	{

		// Creating a few employees
		// and adding them to the list
		list.getPlayerList().add(
			new Player(
				1,
				"Prem",
				"Tiwari",
				"chapradreams@gmail.com",
				"pune"));

		list.getPlayerList().add(
			new Player(
				2, "Vikash",
				"Kumar",
				"abc@gmail.com",
				"mumbai"));

		list.getPlayerList().add(
			new Player(
				3, "Ritesh",
				"Ojha",
				"asdjf@gmail.com",
				"noida"));

		 
	

	// Method to return the list
	public Players getAllPlayers()
	{

		return list;
	}

	 
		// Method to add an team
		// to the teams list
		public void
		
		addPlayer(Player player)
	{
		list.getPlayerList()
			.add(player);
		 
	}
}

}

//2.4 Finally, we need to create a controller class which is the actual implementation of the REST API. According to the REST rules, every new entry in the database has to be called
by the POST method and all the requests from the database must be called using the GET method. 
The same methods are implemented in the following code:

@RestController
@RequestMapping(path = "/player")

public class PlayerController {
	
	@Autowired
	   private PlayerDao playerDao;
	       
	        // Implementing a GET method
	        // to get the list of all
	        // the players
	   @GetMapping(
	        path = "/",
	        produces = "application/json")
	  
	    public Players getPlayers()
	    {
	  
	        return playerDao
	            .getAllPlayers();
	    }
	  
	       
	        // Create a POST method
	        // to add an employee
	        // to the list
	   @PostMapping(
	        path = "/",
	        consumes = "application/json",
	        produces = "application/json")
	  
	    public ResponseEntity<Object> addTeam(
	        @RequestBody Team team)
	    {
	  
	        // Creating an ID of an employee
	        // from the number of employees
	        Integer id
	            = playerDao
	                  .getAllPlayers()
	                  .getPlayerList()
	                  .size()
	              + 1;
	  
	        player.setId(id);
	  
	        playerDao
	            .addPlayer(player);
	  
	        URI location
	            = ServletUriComponentsBuilder
	                  .fromCurrentRequest()
	                  .path("/{id}")
	                  .buildAndExpand(
	                      player.getId())
	                  .toUri();
	  
	               return ResponseEntity
	            .created(location)
	            .build();
	    }

}

//2.5 After implementing all the classes in the project, run the project as Spring Boot App. Once the server starts running, we can send the requests through the browser or postman. 
We can access the running app by going into the following URL:

http://localhost:8080/players/

